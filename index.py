import MetaTrader5 as mt5
from telethon import TelegramClient, events
from datetime import datetime, timedelta
import config
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)

# C·∫•u h√¨nh Telegram
API_ID = "17442352"
API_HASH = "2954f927fdb47a6783874cf3c21e67ce"
PRIVATE_CHANNEL_LINK = "https://t.me/+yzWYZh8wjc5kYTZl"  # Channel t√≠n hi·ªáu

# Kh·ªüi t·∫°o client Telegram
client = TelegramClient("ThanhVan", API_ID, API_HASH)

async def send_message(message):
    """G·ª≠i tin nh·∫Øn ƒë·∫øn channel l·ªói."""
    try:
        channel = await client.get_entity("https://t.me/+QI1UT9w4gqk1NzE1")
        await client.send_message(channel.id, message)
    except Exception as e:
        logging.error(f"Error sending message: {e}")


def ensure_mt5_initialized():
    """Ki·ªÉm tra v√† kh·ªüi t·∫°o k·∫øt n·ªëi MT5 n·∫øu ch∆∞a ƒë∆∞·ª£c kh·ªüi t·∫°o."""
    if not mt5.initialize():
        return False
    return True


async def close_orders(symbol):
    """ƒê√≥ng t·∫•t c·∫£ c√°c l·ªánh cho symbol v√† b√°o c√°o t·ªïng l√£i/l·ªó."""
    if not ensure_mt5_initialized():
        await send_message("L·ªói k·∫øt n·ªëi MT5")
        return False

    positions = mt5.positions_get(symbol=symbol)
    if positions is None:
        await send_message(f"Kh√¥ng c√≥ l·ªánh n√†o cho m√£ {symbol}.")
        return False

    total_profit = 0
    for pos in positions:
        total_profit += pos.profit
        request = {
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": symbol,
            "volume": pos.volume,
            "type": mt5.ORDER_TYPE_SELL if pos.type == mt5.ORDER_TYPE_BUY else mt5.ORDER_TYPE_BUY,
            "position": pos.ticket,
            "deviation": 10,
            "magic": 0,
            "comment": "Close order",
        }
        result = mt5.order_send(request)
        if result.retcode != mt5.TRADE_RETCODE_DONE:
            await send_message(f"L·ªói ƒë√≥ng l·ªánh {pos.ticket}: {result.comment}")
            return False

    await send_message(f"ƒê√£ ƒë√≥ng t·∫•t c·∫£ l·ªánh cho {symbol}. T·ªïng l√£i/l·ªó: {total_profit:.2f}")
    return True

async def close_pending_orders(symbol):
    if not ensure_mt5_initialized():
        await send_message("L·ªói k·∫øt n·ªëi MT5")
        return False

    # L·∫•y danh s√°ch l·ªánh ch·ªù
    pending_orders = mt5.orders_get(symbol=symbol)
    if not pending_orders:
        await send_message(f"Kh√¥ng c√≥ l·ªánh ch·ªù n√†o cho {symbol}.")
        return False

    # H·ªßy t·ª´ng l·ªánh ch·ªù
    for order in pending_orders:
        request = {
            "action": mt5.TRADE_ACTION_REMOVE,
            "order": order.ticket,  # ID c·ªßa l·ªánh ch·ªù
        }
        result = mt5.order_send(request)
        if result.retcode != mt5.TRADE_RETCODE_DONE:
            await send_message(f"L·ªói h·ªßy l·ªánh ch·ªù {order.ticket}: {result.comment}")
            return False

    await send_message(f"ƒê√£ h·ªßy t·∫•t c·∫£ l·ªánh ch·ªù cho {symbol}.")
    return True

async def modify_orders_by_symbol(symbol, stop_loss=None, take_profit=None):
    """Ch·ªânh s·ª≠a SL ho·∫∑c TP c·ªßa c√°c l·ªánh cho symbol."""
    if not ensure_mt5_initialized():
        await send_message("L·ªói k·∫øt n·ªëi MT5")
        return False

    positions = mt5.positions_get(symbol=symbol)
    if positions is None or len(positions) == 0:
        await send_message(f"Kh√¥ng c√≥ l·ªánh n√†o v·ªõi symbol {symbol}.")
        return False

    success_count = 0
    for order in positions:
        request = {
            "action": mt5.TRADE_ACTION_SLTP,
            "position": order.ticket,
            "sl": stop_loss if stop_loss is not None else order.sl,
            "tp": take_profit if take_profit is not None else order.tp,
        }
        result = mt5.order_send(request)
        if result.retcode == mt5.TRADE_RETCODE_DONE:
            success_count += 1
            await send_message(f"ƒê√£ ch·ªânh s·ª≠a l·ªánh {order.ticket} ({symbol}): SL={stop_loss}, TP={take_profit}.")
        else:
            await send_message(f"L·ªói ch·ªânh s·ª≠a l·ªánh {order.ticket}: {result.comment}")

    return success_count > 0


async def close_partial_order(symbol, ticket, volume):
    """ƒê√≥ng m·ªôt ph·∫ßn l·ªánh theo ticket v√† b√°o c√°o l√£i/l·ªó."""
    if not ensure_mt5_initialized():
        await send_message("L·ªói k·∫øt n·ªëi MT5")
        return False

    orders = mt5.positions_get(ticket=ticket)
    if orders is None or len(orders) == 0:
        await send_message(f"Kh√¥ng t√¨m th·∫•y l·ªánh {ticket}.")
        return False

    order = orders[0]
    if volume > order.volume:
        await send_message("Kh·ªëi l∆∞·ª£ng ƒë√≥ng l·ªõn h∆°n kh·ªëi l∆∞·ª£ng l·ªánh.")
        return False

    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": symbol,
        "volume": volume,
        "type": mt5.ORDER_TYPE_SELL if order.type == mt5.ORDER_TYPE_BUY else mt5.ORDER_TYPE_BUY,
        "position": ticket,
        "deviation": 10,
        "magic": 0,
        "comment": "Partial close",
    }
    
    result = mt5.order_send(request)
    if result.retcode != mt5.TRADE_RETCODE_DONE:
        await send_message(f"L·ªói ƒë√≥ng m·ªôt ph·∫ßn l·ªánh {ticket}: {result.comment}")
        return False

    await send_message(f"ƒê√£ ƒë√≥ng m·ªôt ph·∫ßn {volume} c·ªßa l·ªánh {ticket} ({symbol}). L√£i/l·ªó: {order.profit:.2f}")
    return True


async def open_market_order(symbol, volume, order_type, stop_loss=None, take_profit=None):
    """M·ªü l·ªánh th·ªã tr∆∞·ªùng t·∫°i gi√° hi·ªán t·∫°i."""
    if not ensure_mt5_initialized():
        await send_message("L·ªói k·∫øt n·ªëi MT5")
        return False

    tick = mt5.symbol_info_tick(symbol)
    if tick is None:
        await send_message(f"Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin tick cho {symbol}.")
        return False
    price = tick.ask if order_type == mt5.ORDER_TYPE_BUY else tick.bid
    if take_profit is None:
        if stop_loss is None:
            await send_message("Vui l√≤ng cung c·∫•p stop_loss ƒë·ªÉ t√≠nh to√°n take_profit.")
            return False
        if order_type == mt5.ORDER_TYPE_BUY:
            take_profit = price + (price - stop_loss) * 2
        elif order_type == mt5.ORDER_TYPE_SELL:
            take_profit = price - (stop_loss - price) * 2

    
    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": symbol,
        "volume": volume,
        "type": order_type,
        "price": price,
        "sl": stop_loss,
        "tp": take_profit,
        "deviation": 10,
        "magic": 0,
        "comment": "Market order",
    }
    result = mt5.order_send(request)
    if result.retcode != mt5.TRADE_RETCODE_DONE:
        await send_message(f"L·ªói m·ªü l·ªánh: {result.comment} ")
        return False

    await send_message(f"ƒê√£ m·ªü l·ªánh {order_type} {volume} lot cho {symbol} t·∫°i {price}.")
    return True


async def open_pending_order(symbol, volume, order_type, price, stop_loss=None, take_profit=None):
    """M·ªü l·ªánh ch·ªù v·ªõi gi√° ch·ªâ ƒë·ªãnh."""
    if not ensure_mt5_initialized():
        await send_message("L·ªói k·∫øt n·ªëi MT5")
        return False
    
    if take_profit is None:
        if stop_loss is None:
            await send_message("Vui l√≤ng cung c·∫•p stop_loss ƒë·ªÉ t√≠nh to√°n take_profit.")
            return False
        if order_type == mt5.ORDER_TYPE_BUY_LIMIT or order_type == mt5.ORDER_TYPE_BUY_STOP:
            take_profit = price + (price - stop_loss) * 2
        elif order_type == mt5.ORDER_TYPE_SELL_LIMIT or order_type == mt5.ORDER_TYPE_SELL_STOP:
            take_profit = price - (stop_loss - price) * 2

    request = {
        "action": mt5.TRADE_ACTION_PENDING,
        "symbol": symbol,
        "volume": volume,
        "type": order_type,
        "price": price,
        "sl": stop_loss,
        "tp": take_profit,
        "deviation": 10,
        "magic": 0,
        "comment": "Pending order",
    }

    result = mt5.order_send(request)
    if result.retcode != mt5.TRADE_RETCODE_DONE:
        await send_message(f"L·ªói m·ªü l·ªánh ch·ªù: {result.comment}")
        return False

    await send_message(f"ƒê√£ m·ªü l·ªánh ch·ªù {order_type} {volume} lot cho {symbol} t·∫°i {price}.")
    return True


async def get_open_orders():
    """L·∫•y danh s√°ch c√°c l·ªánh ƒëang m·ªü v√† l·ªánh ch·ªù, b√°o c√°o l√£i/l·ªó."""
    if not ensure_mt5_initialized():
        await send_message("L·ªói k·∫øt n·ªëi MT5")
        return []

    positions = mt5.positions_get()  # L·∫•y l·ªánh ƒëang m·ªü
    orders = mt5.orders_get()  # L·∫•y l·ªánh ch·ªù

    if (positions is None or len(positions) == 0) and (orders is None or len(orders) == 0):
        await send_message("Hi·ªán kh√¥ng c√≥ l·ªánh n√†o ƒëang m·ªü ho·∫∑c ƒëang ch·ªù.")
        return []

    message = "üìä **Danh s√°ch l·ªánh ƒëang m·ªü v√† l·ªánh ch·ªù:**\n"

    # Hi·ªÉn th·ªã c√°c l·ªánh ƒëang m·ªü
    if positions:
        message += "\nüî• **L·ªánh ƒëang m·ªü:**\n"
        for pos in positions:
            message += f"üîπ L·ªánh {pos.ticket} - {pos.symbol}: {pos.volume} lot, L√£i/L·ªó {pos.profit:.2f}\n"

    # Hi·ªÉn th·ªã c√°c l·ªánh ch·ªù
    if orders:
        message += "\n‚è≥ **L·ªánh ch·ªù:**\n"
        for order in orders:
            order_type = "BUY LIMIT" if order.type == mt5.ORDER_TYPE_BUY_LIMIT else \
                         "SELL LIMIT" if order.type == mt5.ORDER_TYPE_SELL_LIMIT else \
                         "BUY STOP" if order.type == mt5.ORDER_TYPE_BUY_STOP else \
                         "SELL STOP" if order.type == mt5.ORDER_TYPE_SELL_STOP else "UNKNOWN"
            message += f"üîπ L·ªánh {order.ticket} - {order.symbol}: {order.volume} lot, Lo·∫°i {order_type}, Gi√° {order.price:.5f}\n"

    await send_message(message)
    return {"positions": positions, "orders": orders}


async def check_open_orders(symbol):
    """Ki·ªÉm tra c√≥ l·ªánh m·ªü ho·∫∑c l·ªánh ch·ªù n√†o cho symbol kh√¥ng v√† tr·∫£ v·ªÅ s·ªë volume ƒë√£ v√†o n·∫øu ch∆∞a ƒë·ªß."""
    if not ensure_mt5_initialized():
        await send_message("L·ªói k·∫øt n·ªëi MT5")
        return 0

    # L·∫•y danh s√°ch l·ªánh m·ªü
    positions = mt5.positions_get(symbol=symbol)
    open_volume = sum(pos.volume for pos in positions) if positions else 0

    # L·∫•y danh s√°ch l·ªánh ch·ªù
    pending_orders = mt5.orders_get(symbol=symbol)
    pending_volume = sum(order.volume_initial for order in pending_orders) if pending_orders else 0

    # T·ªïng kh·ªëi l∆∞·ª£ng ƒë√£ v√†o (c·∫£ l·ªánh m·ªü v√† l·ªánh ch·ªù)
    total_volume = open_volume + pending_volume

    # N·∫øu t·ªïng volume ch∆∞a ƒë·ªß, tr·∫£ v·ªÅ s·ªë volume ƒë√£ v√†o, n·∫øu ƒë·ªß th√¨ tr·∫£ v·ªÅ 0
    return total_volume

async def get_daily_profit():
    """L·∫•y t·ªïng l√£i/l·ªó trong ng√†y, bao g·ªìm ph√≠ s√†n v√† swap."""
    
    # ƒê·∫£m b·∫£o k·∫øt n·ªëi v·ªõi MT5
    if not ensure_mt5_initialized():
        await send_message("L·ªói k·∫øt n·ªëi MT5")
        return 0.0
    
    # X√°c ƒë·ªãnh th·ªùi gian ƒë·∫ßu ng√†y v√† cu·ªëi ng√†y
    start_of_day = datetime.today().replace(hour=0, minute=0, second=0, microsecond=0)
    end_of_day = start_of_day + timedelta(days=1)  # L·∫•y ƒë·∫øn cu·ªëi ng√†y

    # L·∫•y danh s√°ch giao d·ªãch trong ng√†y
    history_orders = mt5.history_deals_get(start_of_day, end_of_day)

    # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ giao d·ªãch
    if history_orders is None or len(history_orders) == 0:
        await send_message("üìâ Kh√¥ng c√≥ giao d·ªãch n√†o trong ng√†y.")
        return 0.0

    # T√≠nh t·ªïng l·ª£i nhu·∫≠n/thua l·ªó bao g·ªìm ph√≠ s√†n v√† swap
    total_profit = sum(deal.profit + deal.commission + deal.swap for deal in history_orders)

    # G·ª≠i tin nh·∫Øn b√°o c√°o
    message = f"üìä T·ªïng l√£i/l·ªó trong ng√†y: {total_profit:.2f} USD (ƒê√£ t√≠nh ph√≠ & swap)"
    await send_message(message)

    return total_profit

async def move_sl_to_entry(symbol):
    """D·ªùi Stop Loss (SL) v·ªÅ ƒëi·ªÉm v√†o l·ªánh (Entry) cho t·∫•t c·∫£ c√°c l·ªánh m·ªü c·ªßa m·ªôt symbol."""
    if not ensure_mt5_initialized():
        await send_message("L·ªói k·∫øt n·ªëi MT5")
        return False

    # L·∫•y danh s√°ch l·ªánh m·ªü c·ªßa symbol
    positions = mt5.positions_get(symbol=symbol)
    if not positions:
        await send_message(f"Kh√¥ng c√≥ l·ªánh n√†o m·ªü cho {symbol}.")
        return False

    updated_count = 0  # ƒê·∫øm s·ªë l·ªánh ƒë∆∞·ª£c c·∫≠p nh·∫≠t

    for pos in positions:
        entry_price = pos.price_open  # Gi√° v√†o l·ªánh
        current_sl = pos.sl  # Stop Loss hi·ªán t·∫°i

        # N·∫øu SL ƒë√£ b·∫±ng Entry th√¨ b·ªè qua
        if current_sl == entry_price:
            continue  

        # T·∫°o y√™u c·∫ßu c·∫≠p nh·∫≠t SL
        request = {
            "action": mt5.TRADE_ACTION_SLTP,
            "position": pos.ticket,  # ID c·ªßa l·ªánh c·∫ßn c·∫≠p nh·∫≠t
            "sl": entry_price,  # C·∫≠p nh·∫≠t Stop Loss v·ªÅ Entry
            "tp": pos.tp,  # Gi·ªØ nguy√™n Take Profit
        }
        result = mt5.order_send(request)

        if result.retcode == mt5.TRADE_RETCODE_DONE:
            updated_count += 1
        else:
            await send_message(f"L·ªói d·ªùi SL l·ªánh {pos.ticket}: {result.comment}")

    if updated_count > 0:
        await send_message(f"ƒê√£ d·ªùi SL v·ªÅ Entry cho {updated_count} l·ªánh c·ªßa {symbol}.")
    else:
        await send_message(f"Kh√¥ng c√≥ l·ªánh n√†o c·∫ßn d·ªùi SL cho {symbol}.")
    
    return True

async def get_current_price(symbol):
    """L·∫•y gi√° Bid v√† Ask hi·ªán t·∫°i c·ªßa m·ªôt symbol v√† g·ª≠i tin nh·∫Øn."""
    if not ensure_mt5_initialized():
        await send_message("L·ªói k·∫øt n·ªëi MT5")
        return

    # L·∫•y th√¥ng tin gi√° c·ªßa symbol
    tick = mt5.symbol_info_tick(symbol)
    if tick is None:
        await send_message(f"L·ªói l·∫•y gi√° cho {symbol}. C√≥ th·ªÉ symbol kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒë∆∞·ª£c k√≠ch ho·∫°t.")
        return

    # Ki·ªÉm tra n·∫øu tick.last h·ª£p l·ªá
    last_price = f"{tick.last:.5f}" if tick.last is not None and tick.last != 0 else "Kh√¥ng c√≥"

    message = (
        f"üìà Gi√° hi·ªán t·∫°i c·ªßa {symbol}:\n"
        f"üîπ Bid: {tick.bid:.5f}\n"
        f"üîπ Ask: {tick.ask:.5f}\n"
        f"üîπ Last: {last_price}"
    )

    await send_message(message)

async def get_account_balance():
    """L·∫•y s·ªë d∆∞ t√†i kho·∫£n v√† g·ª≠i tin nh·∫Øn."""
    if not ensure_mt5_initialized():
        await send_message("L·ªói k·∫øt n·ªëi MT5")
        return

    # L·∫•y th√¥ng tin t√†i kho·∫£n
    account_info = mt5.account_info()
    if account_info is None:
        await send_message("L·ªói l·∫•y th√¥ng tin t√†i kho·∫£n. Ki·ªÉm tra k·∫øt n·ªëi MT5.")
        return

    message = (
        f"üí∞ **Th√¥ng tin t√†i kho·∫£n** üí∞\n"
        f"üîπ S·ªë d∆∞ (Balance): {account_info.balance:.2f}\n"
    )

    await send_message(message)

async def handle_message(event):
    """X·ª≠ l√Ω tin nh·∫Øn nh·∫≠n t·ª´ k√™nh Telegram."""
    message_text = event.message.message.lower()
    parts = message_text.split()
    if not parts:
        return

    command = parts[0].upper()
    try:
        # L·ªánh l·∫•y danh s√°ch c√°c l·ªánh ƒëang m·ªü
        if command == config.GET_ORDERS:
            await get_open_orders()

        elif command == config.GET_DAILY:
            await get_daily_profit()
        elif command == config.GET_MONEY:
            await get_account_balance()

        # C√°c l·ªánh c·∫ßn symbol l√†m tham s·ªë th·ª© 2
        elif len(parts) >= 2:
            symbol_key = parts[1].upper()
            if symbol_key not in config.symbols:
                symbol = symbol_key
            else:
                symbol = config.symbols[symbol_key]

            if command == config.GET and len(parts) == 2:
                await get_current_price(symbol)
            elif command == config.ENTRY_SL and len(parts) == 2:
                await move_sl_to_entry(symbol)
            elif command == config.CLOSE and len(parts) == 2:
                await close_orders(symbol)
            elif command == config.CLOSE_PENDING and len(parts) == 2:
                await close_pending_orders(symbol)
            elif command == config.EDIT_SL and len(parts) == 3:
                value = float(parts[2])
                await modify_orders_by_symbol(symbol, stop_loss=value)

            elif command == config.EDIT_TP and len(parts) == 3:
                value = float(parts[2])
                await modify_orders_by_symbol(symbol, take_profit=value)

            elif command in [config.BUY, config.SELL]:
                vol = config.VOLUME - await check_open_orders(symbol)
                if vol == 0:
                    await send_message(f"C√≥ l·ªánh {symbol} r·ªìi, kh√¥ng v√†o n·ªØa!")
                    return
                order_type = config.order_types[command]
                if len(parts) == 2:
                    await open_market_order(symbol, vol, order_type)
                elif len(parts) == 3:
                    sl = float(parts[2])
                    await open_market_order(symbol, vol, order_type, stop_loss=sl)
                elif len(parts) == 4:
                    sl = float(parts[2])
                    tp = float(parts[3])
                    await open_market_order(symbol, vol, order_type, stop_loss=sl, take_profit=tp)

            elif command in [config.BUY_LIMIT, config.BUY_STOP, config.SELL_LIMIT, config.SELL_STOP]:
                vol = config.VOLUME - await check_open_orders(symbol)
                if vol == 0:
                    await send_message(f"C√≥ l·ªánh {symbol} r·ªìi, kh√¥ng v√†o n·ªØa!")
                    return
                order_type = config.order_types[command]
                if len(parts) == 4:
                    price = float(parts[2])
                    sl = float(parts[3])
                    await open_pending_order(symbol, vol, order_type, price, stop_loss=sl)
                elif len(parts) == 5:
                    price = float(parts[2])
                    sl = float(parts[3])
                    tp = float(parts[4])
                    await open_pending_order(symbol, vol, order_type, price, stop_loss=sl, take_profit=tp)
                else:
                    await send_message(f"‚ùå S·ªë tham s·ªë kh√¥ng h·ª£p l·ªá cho l·ªánh ch·ªù: {message_text}")

            else:
                await send_message(f"‚ùå Kh√¥ng hi·ªÉu l·ªánh: {message_text}")
        else:
            await send_message(f"‚ùå Kh√¥ng hi·ªÉu l·ªánh: {message_text}")
    except Exception as e:
        await send_message(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω tin nh·∫Øn: {str(e)}")


async def main():
    """Ch·∫°y bot Telegram."""
    await client.start()
    logging.info("ƒê√£ k·∫øt n·ªëi ƒë·∫øn Telegram.")

    @client.on(events.NewMessage(chats=PRIVATE_CHANNEL_LINK))
    async def new_message_listener(event):
        await handle_message(event)

    await client.run_until_disconnected()


if __name__ == "__main__":
    with client:
        client.loop.run_until_complete(main())
